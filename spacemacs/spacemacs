;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   dotspacemacs-distribution 'spacemacs-base  ;; 'spacemacs | 'spacemacs-base
   dotspacemacs-enable-lazy-installation 'unused ;; 'unused | 'all | nil
   dotspacemacs-ask-for-lazy-installation t ;; t
   ;; Additional layers search paths; paths must have trailing slash:
   dotspacemacs-configuration-layer-path '() ;; '()
   dotspacemacs-configuration-layers
   '(
     ;;; cherry-picking spacemacs layers beyond spacemacs-base
     (spacemacs-completion :packages ido ido-vertical-mode)
     spacemacs-editing
     spacemacs-editing-visual
     spacemacs-evil
     spacemacs-misc
     (spacemacs-ui :packages (not desktop open-junk-file winum))
     spacemacs-ui-visual
     (spacemacs-layouts :variables layouts-enable-autosave t)
     spacemacs-org

     ;;; themes and colours
     themes-megapack
     colors

     ;;; system
     (osx :variables osx-use-option-as-meta t)
     (shell :variables
            shell-default-shell 'ansi-term
            shell-default-term-shell "/usr/local/bin/fish")

     ;;; completion
     (ivy :variables ivy-count-format "%d: ")
     (auto-completion :packages
                      ;; in company dropdown:
                      ;; C-j/k up/down; C-l complete; C-d doc; C-/ search
                      company company-quickhelp company-statistics
                      hippie-exp ;; M-/ cycle various expansions
                      fuzzy smartparens
                      ; yasnippet auto-yasnippet ; not sure how to use these
                      :variables
                      auto-completion-return-key-behavior nil ; use C-l or jk
                      auto-completion-tab-key-behavior 'cycle
                      auto-completion-complete-with-key-sequence "jk"
                      auto-completion-enable-help-tooltip nil ; buggy/ugly
                      auto-completion-enable-sort-by-usage t)


     ;;; vcs
     version-control
     git

     ;;; editing and movement
     ;; C-a/C-e in emacsish modes (C-e probably overridden for viewport scroll)
     (better-defaults :variables
                      better-defaults-move-to-beginning-of-code-first t
                      better-defaults-move-to-end-of-code-first t)
     evil-cleverparens
     (evil-snipe :variables
                 ;; regular snipe with s/S is better; this disables that
                 ; evil-snipe-enable-alternate-f-and-t-behaviors t
                 ;; I guess I could re-enable evil-snipe-mode after tho?
                 )

     ;;; languages
     emacs-lisp
     shell-scripts
     markdown
     html
     (javascript :packages (not coffee-mode helm-gtags))
     react
     (ruby :variables
           ruby-enable-enh-ruby-mode nil
           ruby-version-manager 'rbenv)
     (clojure :variables
              clojure-enable-fancify-symbols t
              clojure-enable-sayid t
              clojure-enable-clj-refactor t)
     haskell
     (org :variables
          org-projectile-file "TODO.org"
          ; org-enable-reveal-js-support t ; - buggy?
          org-enable-github-support t)

     ;;; apps
     deft
   )

   dotspacemacs-additional-packages '()
   dotspacemacs-frozen-packages '()
   dotspacemacs-excluded-packages '()
   dotspacemacs-install-packages 'used-only))


(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(noctilux
                         sanityinc-tomorrow-bright
                         sanityinc-tomorrow-night
                         sanityinc-tomorrow-blue
                         spacemacs-dark
                         spacemacs-light
                         solarized-light
                         solarized-dark
                         leuven
                         monokai
                         zenburn)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Monoid"
                               :size 11
                               :weight normal
                               :width semi-condensed
                               :powerline-scale 1.4)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ t
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text t
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native t
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 93
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 88
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers nil
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'current
   ;; If non nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil
   ))
(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."
  (fringe-mode 4)

  ;; indent levels:
  (setq standard-indent 2
        css-indent-offset 2
        js-indent-level 2)
  (add-hook 'web-mode-hook
            (lambda ()
              (setq web-mode-markup-indent-offset 2
                    web-mode-code-indent-offset 2
                    web-mode-css-indent-offset 2)))

  ;; which-key config:
  ;; esc out of which-key
  (which-key-define-key-recursively global-map [escape] 'ignore t)
  ;; del (backspace) to undo a key
  (which-key-define-key-recursively global-map (kbd "DEL") 'which-key-undo)
  (which-key-define-key-recursively global-map [right] 'which-key-show-next-page-cycle)
  (spacemacs/set-leader-keys (kbd "DEL") 'ignore)
  (setq which-key-special-keys '("SPC" "TAB" "RET" "ESC" "DEL"))
  (setq which-key-sort-order 'which-key-key-order-alpha)

  (setq which-key-allow-multiple-replacements t)
  (push '((nil . "which-key-show-next-page-cycle") . (nil . "(next...)"))
        which-key-replacement-alist)

  ;; ivy extra config because I'm omitting spacemacs-completion
  (setq ivy-height 15
        ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
  (spacemacs|hide-lighter ivy-mode)

  ;; powerline
  (setq ns-use-srgb-colorspace nil ;; not ideal but fix separator colours
        powerline-default-separator 'bar)

  ;; leader bindings that don't belong anywhere else right now
  (spacemacs/set-leader-keys
    "`"  'ivy-switch-buffer
    "bo" 'ivy-switch-buffer-other-window
    "bq" 'kill-buffer-and-window
    "bh" 'bury-buffer
    "bH" 'spacemacs/home
    "w C-f" 'follow-mode                ; this is a remap to clear up SPC w f
    "w f" 'make-frame
    "w F" 'delete-other-frames
    "w q" 'delete-frame
    "t_" 'hl-line-mode
    "t C-_" 'global-hl-line-mode)

  ;; g- and g= better than C-o, C-z/i
  (define-key evil-normal-state-map "g-" 'evil-jump-backward)
  (define-key evil-normal-state-map "g=" 'evil-jump-forward)

  ;; activate some modes by default
  (add-hook 'spacemacs-post-user-config-hook
            (lambda ()
              (spacemacs/toggle-mode-line-battery-on)
              (golden-ratio-mode 1)
              (global-evil-mc-mode 1)
              (setq fci-rule-color "#141416")
              ; (fci-mode 1) - this is buggy on blank lines, see avy-goto-W
              (highlight-indentation-mode 1)))

  ;; cursor colours for states
  (setq evil-normal-state-cursor  '("#d7ffaf" box)
        evil-insert-state-cursor  '("#afd7ff" (bar . 2))
        evil-visual-state-cursor  '("#d7afff" (hbar . 2))
        evil-emacs-state-cursor   '("#afd7ff" box)
        evil-replace-state-cursor '("#ffd7af" (hbar . 2))
        evil-motion-state-cursor  '("#afffd7" box))

  ;; avy
  (evil-define-key '(normal visual) 'global "gl" 'evil-avy-goto-line)
  (evil-define-key '(normal visual) 'global "gW" 'evil-avy-goto-word-0)
  (evil-define-key '(normal visual) 'global "gK" 'avy-kill-whole-line)
  (spacemacs/set-leader-keys "jW" 'evil-avy-goto-word-0)
  (spacemacs/set-leader-keys "jK" 'avy-kill-whole-line)

  (evil-define-command v|evil-delete-backward-WORD ()
    "Based on evil-delete-backward-word"
    (if (and (bolp) (not (bobp)))
        (progn
          (unless evil-backspace-join-lines (user-error "Beginning of line"))
          (delete-char -1))
      (delete-region (max
                      (save-excursion (evil-backward-WORD-begin) (point))
                      (line-beginning-position))
                     (point))))

  (evil-define-key nil 'global
    (kbd "<M-left>") 'evil-backward-word-begin
    (kbd "<M-right>") 'evil-forward-word-end
    (kbd "<s-left>") 'evil-backward-WORD-begin
    (kbd "<s-right>") 'evil-forward-WORD-end)
  (evil-define-key '(insert replace) 'global
    (kbd "<M-backspace>") 'evil-delete-backward-word
    (kbd "<s-backspace>") 'v|evil-delete-backward-WORD)
  (evil-define-key nil 'evil-cleverparens-mode
    (kbd "<M-left>") 'evil-cp-backward-symbol-begin
    (kbd "<M-right>") 'evil-cp-forward-symbol-end)
  (evil-define-key '(insert replace) 'evil-cleverparens-mode
    (kbd "<M-backspace>") 'evil-cp-delete-backward-word)

  ;; evil-cleverparens
  (spacemacs/toggle-evil-cleverparens-on)
  (add-hook 'clojure-mode-hook #'evil-cleverparens-mode)
  (add-hook 'emacs-lisp-mode-hook #'evil-cleverparens-mode)

  ;; TODO: use sp-sexp-up or the evil version to get out and then eval
  (add-hook 'clojure-mode-hook
            (lambda ()
              (spacemacs/set-leader-keys-for-major-mode 'clojure-mode
                "ev" 'cider-eval-sexp-at-point)))

  (setq now--home-file "~/now/todo.org"
        now--nav-file "~/now/_nav.org")
  (defun now|open-home ()
    "Open org home file (now--home-file)"
    (interactive)
    (find-file now--home-file))
  (defun now|open-nav ()
    "Open nav file (now--nav-file) in other window"
    (interactive)
    (find-file-other-window now--nav-file))

  (spacemacs/set-leader-keys
    "ao SPC" 'now|open-home)

;;; org-mode config
  (with-eval-after-load 'org
    (setq org-hide-emphasis-markers t)
    (setq org-pretty-entities t)
    (setq org-use-sub-superscripts '{})
    (setq org-todo-keywords '((sequence "☐(t)" "|" "☑(d)")
                              (type "!(b@)" "?(q@)" "|" "✗(x)")
                              (sequence "|" "☑⋆(c@)")))
    ;; set STARTUP: logdone per file to override
    (setq org-log-done nil)
    (setq org-use-fast-todo-selection 'prefix)
    (setq org-log-into-drawer nil)
    (setq org-directory "~/now")
    (setq org-default-notes-file (concat org-directory "/todo.org"))
    (setq org-capture-templates
          '(("t" "todo" entry
             (file+headline org-default-notes-file "inbox")
             "** TODO %?")
            ("a" "annotated todo" entry
             (file+headline org-default-notes-file "inbox")
             "** TODO %?\n   %u\n   %a")))
    (setq org-refile-targets '((org-agenda-files . (:level . 1)))))
  (spacemacs/set-leader-keys-for-major-mode
    'org-mode
    "x\\" 'org-toggle-pretty-entities
    "\\" 'now|open-nav)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((js . t)
     (clojure . t)
     (ruby . t)
     (python . t)))

;;; deft config
  (setq deft-directory "~/notes")
  (setq deft-extensions '("org" "md" "txt"))
  )

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."
  (setq-default
   ;; can use right option key to enter symbols like usual, left is Meta
   mac-right-option-modifier t
   which-key-enable-extended-define-key t
   ))

(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(compilation-message-face (quote default))
 '(cua-global-mark-cursor-color "#2aa198")
 '(cua-normal-cursor-color "#839496")
 '(cua-overwrite-cursor-color "#b58900")
 '(cua-read-only-cursor-color "#859900")
 '(custom-safe-themes
   (quote
    ("bb749a38c5cb7d13b60fa7fc40db7eced3d00aa93654d150b9627cabd2d9b361" default)))
 '(evil-want-Y-yank-to-eol t)
 '(exec-path-from-shell-arguments (quote ("-l" "-i")))
 '(exec-path-from-shell-check-startup-files nil)
 '(global-rainbow-identifiers-mode t)
 '(highlight-changes-colors (quote ("#FD5FF0" "#AE81FF")))
 '(highlight-symbol-colors
   (--map
    (solarized-color-blend it "#002b36" 0.25)
    (quote
     ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
 '(highlight-symbol-foreground-color "#93a1a1")
 '(highlight-tail-colors
   (quote
    (("#20240E" . 0)
     ("#679A01" . 20)
     ("#4BBEAE" . 30)
     ("#1DB4D0" . 50)
     ("#9A8F21" . 60)
     ("#A75B00" . 70)
     ("#F309DF" . 85)
     ("#20240E" . 100))))
 '(hl-bg-colors
   (quote
    ("#7B6000" "#8B2C02" "#990A1B" "#93115C" "#3F4D91" "#00629D" "#00736F" "#546E00")))
 '(hl-fg-colors
   (quote
    ("#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36")))
 '(hl-sexp-background-color "#efebe9")
 '(js2-basic-offset 2)
 '(js2-bounce-indent-p t)
 '(js2-concat-multiline-strings nil)
 '(js2-ignored-warnings (quote ("msg.missing.semi")))
 '(js2-include-node-externs t)
 '(js2-strict-missing-semi-warning nil)
 '(js2-strict-trailing-comma-warning nil)
 '(magit-diff-use-overlays nil)
 '(magit-log-arguments (quote ("--graph" "--color" "--decorate" "-n256")))
 '(nrepl-message-colors
   (quote
    ("#CC9393" "#DFAF8F" "#F0DFAF" "#7F9F7F" "#BFEBBF" "#93E0E3" "#94BFF3" "#DC8CC3")))
 '(org-agenda-files (quote ("~/now/work.org" "~/now/todo.org")))
 '(package-selected-packages
   (quote
    (writeroom-mode visual-fill-column string-inflection seeing-is-believing sayid ruby-refactor ruby-hash-syntax rjsx-mode prettier-js password-generator overseer org-brain nameless markdown-mode magit-svn kaolin-themes json-navigator hierarchy ivy-xref impatient-mode gitignore-templates flycheck-bashate eziam-theme evil-org evil-lion evil-goggles editorconfig doom-themes all-the-icons memoize counsel-css browse-at-remote f dash s dotenv-mode persp-mode eyebrowse zenburn-theme zen-and-art-theme xterm-color ws-butler which-key wgrep web-mode web-beautify volatile-highlights vi-tilde-fringe uuidgen use-package unfill underwater-theme ujelly-theme twilight-theme twilight-bright-theme twilight-anti-bright-theme toxi-theme toc-org tao-theme tangotango-theme tango-plus-theme tango-2-theme tagedit sunny-day-theme sublime-themes subatomic256-theme subatomic-theme spaceline powerline spacegray-theme soothe-theme solarized-theme soft-stone-theme soft-morning-theme soft-charcoal-theme smyx-theme smex smeargle slim-mode shell-pop seti-theme scss-mode sass-mode rvm ruby-tools ruby-test-mode rubocop rspec-mode robe reverse-theme reveal-in-osx-finder restart-emacs request rbenv rake rainbow-mode rainbow-identifiers rainbow-delimiters railscasts-theme purple-haze-theme pug-mode professional-theme popwin planet-theme phoenix-dark-pink-theme phoenix-dark-mono-theme pcre2el pbcopy paradox osx-trash osx-dictionary orgit organic-green-theme org-projectile org-category-capture org-present org-pomodoro alert log4e gntp org-plus-contrib org-download org-bullets omtose-phellack-theme oldlace-theme occidental-theme obsidian-theme neotree naquadah-theme mwim mustang-theme multi-term move-text monokai-theme monochrome-theme molokai-theme moe-theme minitest minimal-theme material-theme majapahit-theme magit-gitflow madhat2r-theme macrostep lush-theme lorem-ipsum livid-mode skewer-mode simple-httpd linum-relative link-hint light-soap-theme launchctl json-mode json-snatcher json-reformat js2-refactor js2-mode js-doc jbeans-theme jazz-theme ivy-hydra ir-black-theme intero flycheck insert-shebang inkpot-theme indent-guide hungry-delete htmlize hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers parent-mode highlight-indentation heroku-theme hemisu-theme helm-make helm helm-core hc-zenburn-theme haskell-snippets haml-mode gruvbox-theme gruber-darker-theme grandshell-theme gotham-theme golden-ratio gnuplot gitignore-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe+ git-gutter-fringe fringe-helper git-gutter+ git-gutter gandalf-theme fuzzy flx-ido flx flatui-theme flatland-theme fish-mode fill-column-indicator farmhouse-theme fancy-battery expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-tutor evil-surround evil-snipe evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit magit magit-popup git-commit ghub treepy graphql with-editor evil-lisp-state evil-indent-plus evil-iedit-state iedit evil-exchange evil-escape evil-ediff evil-cleverparens smartparens evil-args evil-anzu anzu evil goto-chg espresso-theme eshell-z eshell-prompt-extras esh-help emmet-mode elisp-slime-nav dumb-jump popup dracula-theme django-theme diminish diff-hl deft darktooth-theme autothemer darkokai-theme darkmine-theme darkburn-theme dakrone-theme cyberpunk-theme counsel-projectile projectile counsel swiper ivy company-web web-completion-data company-tern dash-functional tern company-statistics company-shell company-quickhelp pos-tip company-ghci company-ghc ghc haskell-mode company-cabal company column-enforce-mode color-theme-sanityinc-tomorrow color-theme-sanityinc-solarized color-identifiers-mode cmm-mode clues-theme clojure-snippets clj-refactor hydra inflections edn multiple-cursors paredit peg clean-aindent-mode cider-eval-sexp-fu eval-sexp-fu highlight cider sesman queue pkg-info clojure-mode epl chruby cherry-blossom-theme busybee-theme bundler inf-ruby bubbleberry-theme birds-of-paradise-plus-theme bind-map bind-key badwolf-theme auto-yasnippet yasnippet auto-highlight-symbol auto-compile packed async apropospriate-theme anti-zenburn-theme ample-zen-theme ample-theme alect-themes aggressive-indent afternoon-theme adaptive-wrap ace-window ace-link avy white-sand-theme undo-tree spinner seq rebecca-theme ox-gfm org-mime noctilux-theme mmm-mode markdown-toc let-alist gh-md exotica-theme evil-unimpaired coffee-mode)))
 '(paradox-github-token t)
 '(pdf-view-midnight-colors (quote ("#DCDCCC" . "#383838")))
 '(pos-tip-background-color "#A6E22E")
 '(pos-tip-foreground-color "#272822")
 '(rainbow-identifiers-cie-l*a*b*-lightness 75 t)
 '(rainbow-identifiers-cie-l*a*b*-saturation 10 t)
 '(safe-local-variable-values
   (quote
    ((cider-clojure-cli-global-options . "-A:dev")
     (cider-default-cljs-repl . figwheel-main)
     (cider-preferred-build-tool . "clojure-cli"))))
 '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#073642" 0.2))
 '(spacemacs-theme-comment-bg nil)
 '(spacemacs-theme-org-highlight t)
 '(term-default-bg-color "#002b36")
 '(term-default-fg-color "#839496")
 '(vc-annotate-background "#2B2B2B")
 '(vc-annotate-color-map
   (quote
    ((20 . "#BC8383")
     (40 . "#CC9393")
     (60 . "#DFAF8F")
     (80 . "#D0BF8F")
     (100 . "#E0CF9F")
     (120 . "#F0DFAF")
     (140 . "#5F7F5F")
     (160 . "#7F9F7F")
     (180 . "#8FB28F")
     (200 . "#9FC59F")
     (220 . "#AFD8AF")
     (240 . "#BFEBBF")
     (260 . "#93E0E3")
     (280 . "#6CA0A3")
     (300 . "#7CB8BB")
     (320 . "#8CD0D3")
     (340 . "#94BFF3")
     (360 . "#DC8CC3"))))
 '(vc-annotate-very-old-color "#DC8CC3")
 '(weechat-color-list
   (unspecified "#272822" "#20240E" "#F70057" "#F92672" "#86C30D" "#A6E22E" "#BEB244" "#E6DB74" "#40CAE4" "#66D9EF" "#FB35EA" "#FD5FF0" "#74DBCD" "#A1EFE4" "#F8F8F2" "#F8F8F0"))
 '(xterm-color-names
   ["#073642" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#eee8d5"])
 '(xterm-color-names-bright
   ["#002b36" "#cb4b16" "#586e75" "#657b83" "#839496" "#6c71c4" "#93a1a1" "#fdf6e3"]))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:foreground "#cccccc" :background "#202020"))))
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil))))
 '(highlight-indentation-face ((t (:inherit fringe))))
 '(org-todo ((t (:background "grey13" :foreground "#cd2066" :inverse-video nil :underline "#442323" :slant normal :weight bold :height 0.9))))
 '(org-tag ((t (:background "grey13" :foreground "#fa6acc" :box (:line-width 1 :color "#333044") :slant italic :height 0.95))))
 '(org-tag-group ((t (:inherit org-tag :foreground "#afdfff" :slant italic :weight extra-light))))
 '(show-paren-mismatch ((t (:background "black" :foreground "#ff3333" :underline (:color foreground-color :style wave) :weight bold))))
 '(spaceline-evil-emacs ((t (:background "#ffafd7" :foreground "#202020" :inherit (quote mode-line)))))
 '(spaceline-evil-insert ((t (:background "#afd7ff" :foreground "#202020" :inherit (quote mode-line)))))
 '(spaceline-evil-motion ((t (:background "#afffd7" :foreground "#202020" :inherit (quote mode-line)))))
 '(spaceline-evil-normal ((t (:background "#d7ffaf" :foreground "#202020" :inherit (quote mode-line)))))
 '(spaceline-evil-replace ((t (:background "#ffd7af" :foreground "#202020" :inherit (quote mode-line)))))
 '(spaceline-evil-visual ((t (:background "#d7afff" :foreground "#202020" :inherit (quote mode-line)))))
 '(spacemacs-emacs-face ((t (:background "#ffafd7" :foreground "#292929" :inherit (quote mode-line)))))
 '(spacemacs-insert-face ((t (:background "#afd7ff" :foreground "#202020" :inherit (quote mode-line)))))
 '(spacemacs-motion-face ((t (:background "#afffd7" :foreground "#202020" :inherit (quote mode-line)))))
 '(spacemacs-normal-face ((t (:background "#d7ffaf" :foreground "#202020" :inherit (quote mode-line)))))
 '(spacemacs-replace-face ((t (:background "#ffd7af" :foreground "#202020" :inherit (quote mode-line)))))
 '(spacemacs-visual-face ((t (:background "#d7afff" :foreground "#202020" :inherit (quote mode-line))))))
)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:foreground "#cccccc" :background "#202020"))))
 '(org-date ((t (:background "grey14" :foreground "skyblue" :underline "sky" :weight thin :height 0.7))))
 '(org-special-keyword ((t (:inherit font-lock-keyword-face :foreground "grey66" :slant italic :height 0.66))))
 '(org-tag ((t (:background "grey12" :slant italic :weight bold))))
 '(org-todo ((t (:background "#242427" :foreground "#6f3254" :inverse-video nil :box (:line-width 1 :color "#2c2224") :underline nil :slant normal :weight normal)))))

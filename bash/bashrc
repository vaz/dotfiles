##
## vaz's .bashrc
##
###############################################################################

[ -z "$PS1" ] && return

# filesystem detection
darwin () { [ "`uname`" = "Darwin" ]; }
linux () {  [ "`uname`" = "Linux"  ]; }

###############################################################################
## includes

if darwin; then
  if [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
  fi
else
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  fi
fi

if [ -f ~/.local/bin/m.sh ]; then
  . ~/.local/bin/m.sh
fi

if [ -f ~/.local/bin/z.sh ]; then
  . ~/.local/bin/z.sh
fi

###############################################################################
## shell options

umask 002

set -o notify                   # notify immediately when jobs complete
shopt -s cdspell                # fix typo'd args to cd
shopt -s checkwinsize           # check window size after each cmd
shopt -s cmdhist                # history saves multi-line cmd as one entry
shopt -s extglob                # extended pathname expansion
shopt -s lithist                # multi-line hist preserves newlines
export HISTCONTROL=ignoreboth   # no dups in history
HISTIGNORE=" *:&:ls:[bf]g:exit" # don't put these commands in history
export HISTIGNORE               # & means dups, ' *' is a trick for not
                                # storing any command starting with a space
export auto_resume=substring    # type part of job's ARGV to resume

# make less show info for archives, pics, ...
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

###############################################################################
## prompt

__prompt_char () {
  git branch >/dev/null 2>&1 && echo '±' && return
  __hgdir    >/dev/null 2>&1 && echo '☿' && return
  echo '$'
  # Ȣ ȣ  ʢʡ  μ  ☿
}

# display branch and status char for git in prompt
__git_prompt () {
  local st="$(git status --porcelain 2>/dev/null)"

  local x="$(echo "$st" | cut -b1)"
  local y="$(echo "$st" | cut -b2)"

  local chr=''
  local az='[A-Z]' q='\?'

  [[ "$x" =~ $q  ]] && chr+='?'
  [[ "$x" =~ $az ]] && chr+='!'
  [[ "$y" =~ $az ]] && chr+='*'

  __git_ps1 "\e[0;34m on \e[1;34m%s\e[0;32m${chr}\e[0m"
}

export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWUPSTREAM='auto git'

_c_x=$(tput sgr0)
_c_Bb=$(tput bold)$(tput setaf 12)
_c_b=$(tput setaf 4)
_c_G=$(tput setaf 10)
_c_Gb=$(tput bold)$(tput setaf 10)

__git_aware_dir () {
  if [ "$(git rev-parse --is-inside-work-tree 2>&-)" = true ]; then
    local repo=$(git rev-parse --show-toplevel 2>&-)
    repo="$(builtin cd "$repo"; dirs -p | head -1)"
    local prefix=$(git rev-parse --show-prefix 2>&-)
    echo "${_c_Gb}${repo}${_c_x}${_c_b}:${prefix}${_c_x}"
  else
    echo "${_c_Gb}$(dirs -p | head -1)${_c_x}"
  fi
}


export PS1="
${_c_Bb}\u${_c_x}\
${_c_b}@\h${_c_G}"' $(__git_aware_dir)$(__git_ps1 " $_c_b ⭠ ${_c_Bb}%s${_c_x}")
$(__prompt_char)\['${_c_x}'\] '

###############################################################################
## PATH

# homebrew should put these in /etc/paths.d

PATH=/usr/local/opt/ruby/bin:$PATH
PATH=/usr/local/share/npm/bin:$PATH

PATH=$HOME/.rbenv/bin:$PATH
PATH=$HOME/.local/bin:$PATH

export PATH

###############################################################################
## program-specific setup

eval "$(rbenv init -)"
eval "$(npm completion)"

darwin && {
  # make cursor turn red after failed command, green after success
  export PROMPT_COMMAND=' [ $? = 0 ] && it2_palette cc 99ffa8 || it2_palette cc ff88aa;'"$PROMPT_COMMAND"
}

export EDITOR='nvim'

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

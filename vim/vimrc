" vim: fdm=marker:fdl=0:fen

" :: Settings :: {{{
set nocompatible
set backspace=indent,eol,start
set writebackup         " keep a backup file
set history=500
set ruler
set showcmd             " display incomplete commands
set incsearch           " do incremental searching
set ignorecase          " ignore case when searching in all lower-case
set smartcase           " but not when searching with some caps
set scrolloff=3         " keep n lines ahead or behind always showing
set wildmode=longest,list " tab autocomplete like bash
set wildignore=*.pyc,*.o,.git,.hg,.svn " ignore these files in wildcard
set nofoldenable
set foldmethod=marker   " folding code manually (no text inserted)
set shortmess+=I        " skip splash screen on empty files
set expandtab           " expand tabs into spaces
set tabstop=8           " How many spaces does a tab show up as
set softtabstop=2
set shiftwidth=2
set textwidth=79        " text width below 80
set formatoptions=croql " but don't automatically word wrap
set virtualedit=onemore,block " can move one past $, anywhere in visual block
set hidden              " buffers can be hidden while modified
set noerrorbells visualbell t_vb= " error bells are annoying
set list                " show control characters, line endings etc.
silent! set listchars=tab:→\ ,trail:␣,extends:…,precedes:…,nbsp:·,eol:¬
silent! set showbreak=↪
set clipboard+=unnamed  " make the unnamed register equal os clipboard
set mouse=a             " mainly just so I can resize split windows easier
set splitright splitbelow " split more intuitively
set hlsearch
set cursorline cursorcolumn
silent! set colorcolumn=80 " so I know 80
set laststatus=2
set viminfo='20,<50,s10,h,% " remember marks, searches, registers, buffer list
set completeopt=menuone,longest,preview
if version >= 703 | set rnu | else | set nu | endif

" }}}
" :: Keymappings and commands ::"{{{

" Better mapleader
let mapleader=","
let g:mapleader=","

" easier ex mode
noremap ; :
cnoremap kj <C-c>

" free up =
noremap g= =

" add current location to jump list
nnoremap K m`

" navigate changelist with - and =
noremap - g;
noremap = g,

" navigate jumplist with _ and +
noremap _ <C-o>
noremap + <C-i>

" use Q to show command history
nmap Q q:

" clear highlighting from last search
nnoremap <silent> <leader>/ :nohl<cr>

" Make Y work like other capitals
noremap Y y$

" Make up and down keys useful for wrapped lines.
noremap <up> <c-u>
noremap <down> <c-d>
noremap <left> ^
noremap <right> $
nnoremap <space>h ^
nnoremap <space>l $l

" easier window movement
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

nnoremap <silent> <leader>w :call MaximizeToggle ()<CR>

function! MaximizeToggle()
  if exists("s:maximize_session")
    exec "source " . s:maximize_session
    call delete(s:maximize_session)
    unlet s:maximize_session
    let &hidden=s:maximize_hidden_save
    unlet s:maximize_hidden_save
  else
    let s:maximize_hidden_save = &hidden
    let s:maximize_session = tempname()
    set hidden
    exec "mksession! " . s:maximize_session
    only
  endif
endfunction

" pressing return in normal mode opens a line above
nnoremap <cr> mOO<esc>`O
" pressing shift-return in normal mode opens line below
nnoremap <s-cr> mOo<esc>`O

" swap ` for ' because ' is closer and ` is more useful.
noremap ' `

" scroll viewport faster
nnoremap <c-e> 5<c-e>
nnoremap <c-y> 5<c-y>

" keep search pattern at centre of screen
noremap n nzz
noremap N Nzz

" toggle showing control characters
nnoremap <silent> <leader>s :set list!<cr>

" easy underlining/overlining
nnoremap <leader>u== yyPv$r=xjyypv$r=x
nnoremap <leader>u** yyPv$r*XJyypv$r*x
nnoremap <leader>u=  yypv$r=x
nnoremap <leader>u-  yypv$r-x

" paste with blackhole register
nnoremap <silent> <leader>p "_p
nnoremap <silent> <leader>P "_P

" show syntax highlighting groups for word under cursor
nnoremap <silent> <leader>h :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" local cd to current file's dir
nnoremap <leader>c :lcd %:p:h<cr>

function! NumberToggle()
  if(&number == 1)
    if version >= 703
      set rnu
    else
      set nonu
    endif
  elseif(&relativenumber == 1)
    set nornu
  else
    set nu
  endif
endfunc

" toggle showing relative line numbers
nnoremap <silent> <leader>n :call NumberToggle()<cr>

" easier switching buffers, opening files
nnoremap <silent> H :bp<cr>
nnoremap <silent> L :bn<cr>
nnoremap <silent> <backspace> :bd<cr>
nnoremap <silent> ` <c-^>

" Switch tabbing style
nnoremap <leader>2 <esc>:set expandtab tabstop=2 softtabstop=2 shiftwidth=2<cr>
nnoremap <leader>4 <esc>:set expandtab tabstop=4 softtabstop=4 shiftwidth=4<cr>
nnoremap <leader>8 <esc>:set expandtab tabstop=8 softtabstop=8 shiftwidth=8<cr>
nnoremap <leader><leader>2 <esc>:set noexpandtab tabstop=2 softtabstop=2 shiftwidth=2<cr>
nnoremap <leader><leader>4 <esc>:set noexpandtab tabstop=4 softtabstop=4 shiftwidth=4<cr>
nnoremap <leader><leader>8 <esc>:set noexpandtab tabstop=8 softtabstop=8 shiftwidth=8<cr>

" Command for opening a url on a mac:
command! -bar -nargs=1 OpenURL :!open <args>

" sudo save a file
cmap w!! w !sudo tee % >/dev/null

" quick edit files
nnoremap <leader>ev <esc>:e ~/.vimrc<cr>
nnoremap <leader>eg <esc>:e ~/.gvimrc<cr>

fun! EditColourFile()
  redir => l:cs | silent colorscheme | redir END
  let l:cs = "~/.vim/colors/".substitute(l:cs, '^\n', '', '').".vim"
  exec "e" l:cs
endf

nnoremap <leader>ec <esc>:call EditColourFile()<cr>

" Folding
nnoremap <leader>z <esc>:set foldlevel=10000<cr>
nnoremap <leader>Z <esc>:set foldlevel=-10000<cr>

" dragging lines
nnoremap <silent> ∆ :m+<cr>
nnoremap <silent> ˚ :m-2<cr>
vnoremap ∆ :m'>+<CR>gv
vnoremap ˚ :m-2<CR>gv

" good regexes in search
nnoremap <silent> / :nohl<cr>/\v
vnoremap <silent> / :nohl<cr>/\v

 " Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" inside/around []
onoremap ir i[
onoremap ar a[
vnoremap ir i[
vnoremap ar a[

" select last put text
nnoremap <expr> gl '`[' . strpart(getregtype(), 0, 1) . '`]'

"}}}
" :: Plugins ::"{{{

" Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle!
Bundle 'gmarik/vundle'

Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-abolish'
Bundle 'tpope/vim-commentary'
  " autocmd FileType whatever set commentstring=#\ %s
Bundle 'vim-scripts/TailMinusF'
Bundle 'Lokaltog/vim-easymotion'
  let g:EasyMotion_leader_key = '<space>'
Bundle 'nathanaelkane/vim-indent-guides'
  let g:indent_guides_auto_colors = 0
  let g:indent_guides_enable_on_vim_startup = 1
Bundle 'vimoutliner/vimoutliner'
Bundle 'scrooloose/nerdtree'
  nnoremap <leader>t :NERDTreeToggle<cr>
Bundle 'ervandew/supertab'
  let g:SuperTabDefaultCompletionType = "context"
  let g:SuperTabContextDefaultCompletionType = "<c-n>"
  let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
  let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&keywordfunc', '&completefunc']
  let g:SuperTabDefaultCompletionTypeDiscovery = ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>", '&keywordfunc:<c-n>']
  let g:SuperTabRetainCompletionDuration = 'completion'
  let g:SuperTabLongestEnhanced = 1
Bundle 'altercation/vim-colors-solarized'
  let g:solarized_termcolors=256
  let g:solarized_hitrail=1    "default value is 0
Bundle 'git://git.wincent.com/command-t.git'
  nnoremap <silent> <leader><space> :CommandT<cr>
  let g:CommandTMaxFiles = 50000
  let g:CommandTMaxHeight = 20
  let g:CommandTMinHeight = 20
  let g:CommandTMatchWindowReverse = 1
  let g:CommandTCancelMap = ['<C-c>', '<esc>']
Bundle 'sjbach/lusty'
  nnoremap <silent> <tab> :LustyJuggler<cr>
  nnoremap <silent> <s-tab> :LustyBufferExplorer<cr>
  nnoremap <silent> <leader>o :LustyFilesystemExplorer<cr>
  nnoremap <silent> <leader>O :LustyFilesystemExplorerFromHere<cr>
  let g:LustyJugglerSuppressRubyWarning = 1
Bundle 'ack.vim'
  nnoremap <leader>a <esc>:Ack 
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
  augroup sparkup_types
    autocmd!
    autocmd FileType mustache,php,htmldjango runtime! ftplugin/html/sparkup.vim
    let g:sparkupExecuteMapping = '<c-l>'
  augroup END
Bundle 'tpope/vim-rails.git'
Bundle 'tpope/vim-fugitive'
Bundle 'groenewege/vim-less'
Bundle 'timcharper/textile.vim'
Bundle 'scrooloose/syntastic'
  nnoremap <leader>s :SyntasticToggleMode<cr>
Bundle 'mattn/calendar-vim'
Bundle 'chrisbra/NrrwRgn'
Bundle 'vim-scripts/utl.vim'
Bundle 'hsitz/VimOrganizer'
Bundle 'tomasr/molokai'
Bundle 'trapd00r/vim-syntax-vidir-ls'
Bundle 'kchmck/vim-coffee-script'
Bundle 'vim-scripts/matchit.zip'
Bundle 'vim-scripts/ruby-matchit'

"}}}
" :: Syntax and colours ::"{{{

if &term =~ "256color"
  set t_Co=256
endif

if &t_Co > 2 
  syntax on
  colorscheme molokai
  hi Normal ctermbg=none
  hi CursorLine guibg=#232526
  hi CursorColumn guibg=#232526
endif

"}}}
" :: Autocommands ::"{{{

" Enable file type detection.
filetype plugin indent on

" make sure grep shows filename even if searching for single file
" this is for LaTeX-Suite.
set grepprg=grep\ -nH\ $*

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  au FileType text setlocal textwidth=78

  " absolute line numbers in insert mode
  au InsertEnter * :set nu
  au InsertLeave * :set rnu

  " Leave insert mode when idling
  " au CursorHoldI * stopinsert   " nope this is pretty annoying.

  " when editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " resize splits when window is resized
  au VimResized * :wincmd =

  " auto-detect git commit message files for syntax highlighting
  au BufNewFile,BufRead COMMIT_EDITMSG set filetype=gitcommit

  au BufNewFile,BufRead * if &syntax == '' | set foldmethod=indent | endif

  " don't expand tabs to spaces in makefiles
  au FileType make setlocal noexpandtab

  au FileType ruby nnoremap <leader>r <esc>:!ruby %<cr>

  au FileType python nnoremap <leader>P <esc>:call Pep8()<cr> |
                   \ nnoremap <leader>r <esc>:!python %<cr>

  au FileType css let g:SuperTabDefaultCompletionType = '<c-x><c-o>'

  au FileType php set expandtab tabstop=8 softtabstop=2 shiftwidth=2

  " reload vimrc when we save it
  au BufWritePost .vimrc so ~/.vimrc

  " A mapping to source vim files
  " And a mapping to start automatically sourcing the current vim file
  " every time it saves (Good for editing colour files)
  au FileType vim
        \ nnoremap <leader>. <esc>:so %<cr>|
        \ nnoremap <leader>S <esc>:au BufWritePost <buffer> :so %<cr>

  " don't always center the cursor in screen when switching buffers
  au BufLeave * let b:winview = winsaveview()
  au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif

  " conceal to prettify
  au VimEnter * syntax keyword Statement lambda conceal cchar=λ
  au VimEnter * syntax match Operator "->" conceal cchar=→
  au VimEnter * syntax match Operator "=>" conceal cchar=➧
  au FileType haskell,lhaskell syntax match Operator "<-" conceal cchar=←
  au FileType haskell,lhaskell syntax match Operator "-<" conceal cchar=⤛
  au VimEnter * hi! link Conceal Statement
  au VimEnter * set conceallevel=2
augroup END

augroup lines
  au!
  au WinLeave,InsertEnter * set nocursorline | set nocursorcolumn
  au WinEnter,InsertLeave * set cursorline | set cursorcolumn
augroup END
"}}}

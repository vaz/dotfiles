" vim: ft=vim:fdm=marker:fen:fdl=0:
" ䷀ ䷁ ䷂ ䷃ ䷄ ䷅ ䷆ ䷇ ䷈ ䷉ ䷊ ䷋ ䷌ ䷍ ䷎ ䷏ ䷐ ䷑ ䷒ ䷓ ䷔ ䷕ ䷖ ䷗ ䷘ ䷙ ䷚ ䷛ ䷜ ䷝ ䷞ ䷟ •
" •
" ䷣   ——Vaz•縷々
" •
" ䷠ ䷡ ䷢ ䷣ ䷤ ䷥ ䷦ ䷧ ䷨ ䷩ ䷪ ䷫ ䷬ ䷭ ䷮ ䷯ ䷰ ䷱ ䷲ ䷳ ䷴ ䷵ ䷶ ䷷ ䷸ ䷹ ䷺ ䷻ ䷼ ䷽ ䷾ ䷿ •
"
" TODO:{{{1
" - fix completion
" - fix auto-indent/auto-bullet list
" - make K do something useful (look up something...)
" - spell check when it makes sense

" :: Settings {{{1
" :::: general {{{2
set nocompatible                  " thanks for everything, vi
set dir=~/.vim/swap,.             " keep swap files in home dir
set nobackup                      " don't keep backup after writing
set writebackup bdir=~/.vim/tmp/  " use backup when writing a file
set history=500                   " remember 500 ex commands
set clipboard+=unnamed            " unnamed register = os clipboard
set viminfo='20,h                 " remember marks in 'files, not hlsearch
set viminfo+=<50,s10              " remember registers: <Lines sSize-in-Kb
set viminfo+=%                    " remember buflist if invoked w/o args
set cryptmethod=blowfish          " use actually secure crypto with :X

" :::: control {{{2
set mouse=a                       " enable mouse (scrolling is nice)
set backspace=indent,eol,start    " <bs> over stuff like a normal editor
set virtualedit=onemore,block     " move one past eol, anywhere in ^V

" :::: formatting {{{2
set expandtab                     " expand tabs into spaces
set tabstop=8                     " hard tab indent size
set softtabstop=2                 " virtual indent size for tab and backspace and some other stuff
set shiftwidth=2
set textwidth=78        " text width below 80
set formatoptions=croql " but don't automatically word wrap

" :::: search {{{2
set incsearch           " do incremental searching
set ignorecase          " ignore case when searching in all lower-case
set smartcase           " but not when searching with some caps
set nohlsearch          " don't highlight search results by default

" :::: interface {{{2
silent! set beval bdlay=300     " enable popup balloons
set showcmd             " display incomplete normal mode commands
set shortmess+=I        " skip splash screen on empty files
set ruler
set scrolloff=3         " keep n lines ahead or behind always showing
set hidden              " buffers can be hidden while modified
set splitright splitbelow " split more intuitively
set diffopt+=vertical   " always vertical split when :diffsplit
set cursorline cursorcolumn
silent! set colorcolumn=80 " so I know 80
set laststatus=2        " always show status lines
set list                " show control characters, line endings etc.
silent! set listchars=tab:→\ ,trail:␣,extends:…,precedes:…,nbsp:·,eol:¬
silent! set showbreak=↪
if version >= 703 | set rnu | else | set nu | endif
set noerrorbells visualbell t_vb= " error bells are annoying
silent! set conceallevel=2 " conceal shows replacements
silent! set concealcursor=nc " and always conceal in normal mode and search
set completeopt=menuone,longest,preview
set foldenable foldlevel=1000 foldmethod=marker
set display=lastline  " show as much as possible from last (long) line

set wildmode=longest,list " tab autocomplete like bash
set wildignore=*.pyc,*.o,.git,.hg,.svn,.cvs " ignore these files in wildcard


" :: Keymappings and commands ::{{{1

" :::: general {{{2

" set mapleader
let mapleader="\\"
let g:mapleader="\\"

" }}}
" :::: movement {{{2

" swap ` for ' because ' is closer and ` is more useful.
noremap ' `

" navigate changelist with _ and +, jumplist with - and =
" map g= to = to free up =
noremap g= =
noremap _ g;
noremap + g,
noremap - <c-o>
noremap = <c-i>

" make up and down keys useful
noremap <up> <c-u>
noremap <down> <c-d>
noremap <left> ^
noremap <right> $
nnoremap <space>h ^
nnoremap <space>l $l

" make window movement a lot easier
noremap q <c-w>
noremap Q <c-w><c-w>
" don't like accidently quitting windows with qq
noremap qq <c-w><c-w>
" relegate recording to leader mapping
noremap <leader>q q

" }}}
" :::: search {{{2

" good regexes in search, clear old highlighting
noremap <silent> / :set hls<cr>/\v
onoremap <silent> / /\v

" turn on search highlighting for n/n and */#
noremap <silent> n nzv:set hls<cr>
noremap <silent> N Nzv:set hls<cr>
ounmap n
ounmap N
noremap <silent> * *zv:set hls<cr>
noremap <silent> # #zv:set hls<cr>
ounmap *
ounmap #

" }}}
" :::: diff {{{2

nnoremap <leader>du :diffupdate<cr>
nnoremap <leader>dt :diffthis<cr>
nnoremap <leader>do :diffoff<cr>
nnoremap <leader>do :diffoff!<cr>
nnoremap <leader>ds :vert diffsplit<cr>

" }}}
" :::: GPG encryption {{{2

function! WriteGPGEncrypted(fn)
  if !len(a:fn)
    let l:fn=expand("%")
    if !(l:fn =~ '\.\(gpg\|asc\|pgp\)$')
      let l:fn=l:fn . '.gpg'
    endif
  else
    let l:fn=expand(a:fn)
  endif
  let l:fn=escape(l:fn, '#%\[]')
  exe "w !gpg -ae -o '" . l:fn . "'"
endfunction

command! -nargs=? WriteGPGEncrypted call WriteGPGEncrypted("<args>")

" }}}

" scroll viewport faster
nnoremap <c-e> 5<c-e>
nnoremap <c-y> 5<c-y>

" make Y work like D, C, ...
noremap Y y$

" paste with blackhole register to preserve current register contents
nnoremap <silent> <leader>p "_p
nnoremap <silent> <leader>P "_P

nnoremap <silent> <leader>w :call MaximizeToggle ()<CR>

function! MaximizeToggle()
  if exists("s:maximize_session")
    exec "source " . s:maximize_session
    call delete(s:maximize_session)
    unlet s:maximize_session
    let &hidden=s:maximize_hidden_save
    unlet s:maximize_hidden_save
  else
    let s:maximize_hidden_save = &hidden
    let s:maximize_session = tempname()
    set hidden
    exec "mksession! " . s:maximize_session
    only
  endif
endfunction

" pressing return in normal mode opens a line above
nnoremap <cr> mOO<esc>`O
" pressing shift-return in normal mode opens line below
" this only works in gui vim
nnoremap <s-cr> mOo<esc>`O

" toggle showing control characters
nnoremap <silent> <leader>s :set list!<cr>

" easy underlining/overlining
nnoremap <leader>uo= yyPVr=jyypVr=
nnoremap <leader>uo* yyPVr*jyypVr*
nnoremap <leader>u=  yypVr=
nnoremap <leader>u-  yypVr-

" show syntax highlighting groups for word under cursor
nnoremap <silent> <leader>h :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" local cd to current file's dir
nnoremap <leader>c :lcd %:p:h<cr>

function! NumberToggle()
  if(&number == 1)
    if version >= 703
      set rnu
    else
      set nonu
    endif
  elseif(&relativenumber == 1)
    set nornu
  else
    set nu
  endif
endfunc

" toggle showing relative line numbers
nnoremap <silent> <leader>n :call NumberToggle()<cr>

" easier switching buffers, opening files
nnoremap <silent> H :bp<cr>
nnoremap <silent> L :bn<cr>
nnoremap <silent> <backspace> :bd<cr>

function! FlipIfListed()
  if buflisted(expand("#"))
    exe "normal! \<c-^>"
  endif
endfunction
nnoremap <silent> ` :call FlipIfListed()<cr>


" switch tabbing style
nnoremap <leader>2 <esc>:set expandtab tabstop=2 softtabstop=2 shiftwidth=2<cr>
nnoremap <leader>4 <esc>:set expandtab tabstop=4 softtabstop=4 shiftwidth=4<cr>
nnoremap <leader>8 <esc>:set expandtab tabstop=8 softtabstop=8 shiftwidth=8<cr>
nnoremap <leader><leader>2 <esc>:set noexpandtab tabstop=2 softtabstop=2 shiftwidth=2<cr>
nnoremap <leader><leader>4 <esc>:set noexpandtab tabstop=4 softtabstop=4 shiftwidth=4<cr>
nnoremap <leader><leader>8 <esc>:set noexpandtab tabstop=8 softtabstop=8 shiftwidth=8<cr>

" Command for opening a url on a mac:
command! -bar -nargs=1 OpenURL :!open <args>

" sudo save a file
cnoremap w!! w !sudo tee % >/dev/null

" quick edit files
nnoremap <leader>ev <esc>:e ~/.vimrc<cr>
nnoremap <leader>eg <esc>:e ~/.gvimrc<cr>

" todo: there's an autocmd you can use triggered on colorscheme load
" maybe to be more specific about location
fun! EditColourFile()
  redir => l:cs | silent colorscheme | redir END
  exec "e" "~/.vim/colors/".substitute(l:cs, '^\n', '', '').".vim"
endf

nnoremap <leader>ec <esc>:call EditColourFile()<cr>

" folding
nnoremap <leader>z :echo "use builtin zR to open all folds"<cr>
nnoremap <leader>Z :echo "use builtin zM to close all folds"<cr>

" dragging lines
nnoremap <silent> ∆ :m+<cr>
nnoremap <silent> ˚ :m-2<cr>
vnoremap ∆ :m'>+<cr>gv
vnoremap ˚ :m-2<cr>gv

" insert timestamps
iab <expr> ~~t strftime("%H:%M:%S")
iab <expr> ~~d strftime("%y年%m月%d日")
iab <expr> ~~D strftime("%y/%m/%d/")
iab <expr> ~~s strftime("%y年%m月%d日 %H:%M:%S")
iab <expr> ~~S strftime("%y/%m/%d/ %H:%M:%S")
iab <expr> ~~l strftime("%a %d %b %Y")
iab <expr> ~~z strftime("%a %d %b %Y %H:%M:%S")
iab <expr> ~~L strftime("%A %d %B %Y")
iab <expr> ~~Z strftime("%A %d %B %Y %H:%M:%S")

nnoremap ,it i~~t 
nnoremap ,id i~~d
nnoremap ,is i~~s

" select last put text
nnoremap <expr> gl '`[' . strpart(getregtype(), 0, 1) . '`]'

" :: Plugins ::{{{1

" Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle!
Bundle 'gmarik/vundle'

Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-abolish'
Bundle 'tpope/vim-commentary'
  " autocmd FileType whatever set commentstring=#\ %s
Bundle 'vim-scripts/TailMinusF'
Bundle 'Lokaltog/vim-easymotion'
  let g:EasyMotion_leader_key = '<space>'
Bundle 'nathanaelkane/vim-indent-guides'
  let g:indent_guides_auto_colors = 0
  let g:indent_guides_enable_on_vim_startup = 1
Bundle 'vimoutliner/vimoutliner'
Bundle 'scrooloose/nerdtree'
  nnoremap <leader>t :NERDTreeToggle<cr>
Bundle 'ervandew/supertab'
  let g:SuperTabDefaultCompletionType = "context"
  let g:SuperTabContextDefaultCompletionType = "<c-n>"
  let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
  let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&keywordfunc', '&completefunc']
  let g:SuperTabDefaultCompletionTypeDiscovery = ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>", '&keywordfunc:<c-n>']
  let g:SuperTabRetainCompletionDuration = 'completion'
  let g:SuperTabLongestEnhanced = 1
  augroup supertab
    au FileType css let g:SuperTabDefaultCompletionType = '<c-x><c-o>'
  augroup END
Bundle 'altercation/vim-colors-solarized'
  let g:solarized_termcolors=256
  let g:solarized_hitrail=1    "default value is 0
Bundle 'git://git.wincent.com/command-t.git'
  nnoremap <silent> <leader><space> :CommandT<cr>
  let g:CommandTMaxFiles = 50000
  let g:CommandTMaxHeight = 20
  let g:CommandTMinHeight = 20
  let g:CommandTMatchWindowReverse = 1
  let g:CommandTCancelMap = ['<C-c>', '<esc>']
Bundle 'sjbach/lusty'
  nnoremap <silent> <tab> :LustyJuggler<cr>
  nnoremap <silent> <s-tab> :LustyBufferExplorer<cr>
  nnoremap <silent> <leader>o :LustyFilesystemExplorer<cr>
  nnoremap <silent> <leader>O :LustyFilesystemExplorerFromHere<cr>
  let g:LustyJugglerSuppressRubyWarning = 1
Bundle 'ack.vim'
  nnoremap <leader>a <esc>:Ack 
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
  augroup sparkup_types
    autocmd!
    autocmd FileType mustache,php,htmldjango runtime! ftplugin/html/sparkup.vim
    let g:sparkupExecuteMapping = '<c-l>'
  augroup END
Bundle 'tpope/vim-rails.git'
Bundle 'tpope/vim-fugitive'
Bundle 'groenewege/vim-less'
Bundle 'timcharper/textile.vim'
Bundle 'scrooloose/syntastic'
  nnoremap <leader>s :SyntasticToggleMode<cr>
Bundle 'mattn/calendar-vim'
Bundle 'chrisbra/NrrwRgn'
Bundle 'vim-scripts/utl.vim'
Bundle 'hsitz/VimOrganizer'
Bundle 'tomasr/molokai'
Bundle 'trapd00r/vim-syntax-vidir-ls'
Bundle 'kchmck/vim-coffee-script'
Bundle 'vim-scripts/matchit.zip'
Bundle 'vim-scripts/ruby-matchit'
Bundle 'jamessan/vim-gnupg'
  let s:GPGext='\(gpg\|asc\|pgp\)'
  let g:GPGFilenamePattern='*#'.s:GPGext.'*,*.'.s:GPGext.'.txt,*.'.s:GPGext
  let g:GPGPreferArmor=1
Bundle 'jcf/vim-latex'
  augroup latexsuite
    au!
    au FileType tex set sw=2 iskeyword+=:
  augroup END
  set grepprg=grep\ -nH\ $*
  let g:tex_flavor='latex'
Bundle 'matthias-guenther/hammer.vim'
" ::bundle tail::

" :: Syntax and colours ::"{{{1

if &term =~ "256color"
  set t_Co=256
endif

if &t_Co > 2 
  syntax on
  colorscheme molokai
  hi Normal ctermbg=none
  hi CursorLine guibg=#232526
  hi CursorColumn guibg=#232526
  hi Folded guifg=#bb88bb guibg=#000000
  hi Search ctermfg=253 ctermbg=233
  hi DiffText cterm=bold ctermbg=17 guibg=#4C2755 gui=bold,italic
  hi DiffChange ctermfg=181 ctermbg=18 guifg=#89807D guibg=#2C1735
endif

" :: Autocommands ::{{{1

" Enable file type detection.
filetype plugin indent on

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrc
  au!

  " text formatting:
  " set nolist showbreak= linebreak

  au FileType text set nolist showbreak= linebreak commentstring=%s

  " absolute line numbers in insert mode
  au InsertEnter * :set nu
  au InsertLeave * :set rnu

  " Leave insert mode when idling
  " au CursorHoldI * stopinsert   " nope this is pretty annoying.

  " Turn off search highlighting when moving
  au CursorMoved,InsertEnter * set nohls

  " when editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " resize splits when window is resized
  au VimResized * :wincmd =

  " auto-detect git commit message files for syntax highlighting
  au BufNewFile,BufRead COMMIT_EDITMSG set filetype=gitcommit

  au BufNewFile,BufRead * if &syntax == '' | set foldmethod=indent | endif

  " don't expand tabs to spaces in makefiles
  au FileType make setlocal noexpandtab

  au FileType ruby nnoremap <leader>r <esc>:!ruby %<cr>

  au FileType python nnoremap <leader>P <esc>:call Pep8()<cr> |
                   \ nnoremap <leader>r <esc>:!python %<cr>


  au FileType php set expandtab tabstop=8 softtabstop=2 shiftwidth=2

  " reload vimrc when we save it
  au BufWritePost .vimrc so ~/.vimrc | normal! zv

  " A mapping to source vim files
  " And a mapping to start automatically sourcing the current vim file
  " every time it saves (Good for editing colour files)
  au FileType vim
        \ nnoremap <leader>. <esc>:so %<cr>|
        \ nnoremap <leader>S <esc>:au BufWritePost <buffer> :so %<cr>

  " don't always center the cursor in screen when switching buffers
  au BufLeave * let b:winview = winsaveview()
  au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif

  " conceal to prettify
  au VimEnter * syntax keyword Statement lambda conceal cchar=λ
  au VimEnter * syntax match Operator "->" conceal cchar=→
  au VimEnter * syntax match Operator "=>" conceal cchar=➧
  au FileType haskell,lhaskell syntax match Operator "<-" conceal cchar=←
  au FileType haskell,lhaskell syntax match Operator "-<" conceal cchar=⤛
  au VimEnter * hi! link Conceal Statement

  au FileType help nnoremap <silent> <cr> <c-]>

  " always show where we are, foldwise
  au BufReadPost * normal! zv
augroup END

augroup lines
  au!
  au WinLeave,InsertEnter * set nocursorline | set nocursorcolumn
  au WinEnter,InsertLeave * set cursorline | set cursorcolumn
augroup END

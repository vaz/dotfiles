" skip if started as evim
if v:progname =~? "evim"
  finish
endif

" :: Settings ::
set nocompatible
set backspace=indent,eol,start
set writebackup         " keep a backup file
set history=500
set ruler
set showcmd             " display incomplete commands
set incsearch           " do incremental searching
set ignorecase          " ignore case when searching in all lower-case
set smartcase           " but not when searching with some caps
set scrolloff=3         " keep n lines ahead or behind always showing
set wildmode=longest,list " tab autocomplete like bash
set foldmethod=marker   " folding code manually (no text inserted)
set shortmess+=I        " skip splash screen on empty files
set expandtab           " expand tabs into spaces
set tabstop=8           " How many spaces does a tab show up as
set list                " show control characters, line endings etc.
set softtabstop=2
set shiftwidth=2
set virtualedit=all     " can move cursor even where there's no characters
set hidden              " buffers can be hidden while modified
set noerrorbells        " error bells are annoying
set visualbell          " error bells are annoying
set t_vb=               " error bells are annoying
set listchars=tab:>路,eol:$ " show >路路路 for tabs and $ for line endings
set clipboard+=unnamed  " make the unnamed register equal os clipboard
set mouse=a             " mainly just so I can resize split windows easier
setlocal cursorline     " cursor line highlighting
set viminfo='20,<50,s10,h,% " remember marks, searches, registers, buffer list
runtime macros/matchit.vim " % matches more than just brackets:


" :: Keymappings and commands ::

" Better mapleader
let mapleader=","
let g:mapleader=","

" use Q for formatting
nmap Q gq

" clear highlighting from last search
nnoremap <silent> /<esc> :nohl<cr>

" Make Y work like y$ (instead of like yy), because D is like d$
map Y y$

" Make up and down keys useful for wrapped lines.
map <up> gk
map <down> gj

" pressing return in normal mode opens a line below
nnoremap <cr> mOo<esc>`O
" pressing shift-return in normal opens a line above
" doesn't seem to work?
nnoremap <s-cr> O<esc> 

" swap ` with ' because ' is closer and ` is useless
nnoremap ' `
nnoremap ` '

" scroll viewport faster
nnoremap <c-e> 5<c-e>
nnoremap <c-y> 5<c-y>

" toggle showing control characters
nnoremap <silent> <leader>s :set list!<cr>

" local cd to current file's dir
nnoremap <silent> <leader>l :lcd %:p:h<cr>

" toggle showing relative line numbers
" I should make an autocmd so it only shows it in local buffer
" and maybe adjusts vertical splits
nnoremap <silent> <leader>r :set rnu!<cr>

" easier switching buffers
nnoremap <silent> H :bp<cr>
nnoremap <silent> L :bn<cr>
nnoremap <silent> <leader>, <c-^>
nnoremap <silent> <leader>d :bd<cr>
nnoremap <silent> <leader>. :ls<cr>:b 

" shift-tab inserts a real tab
inoremap <s-tab> <c-v><tab>

" Switch from 2 space tabs to 4 space tabs (soft tabs)
nnoremap <leader>2 <esc>:set expandtab softtabstop=2 shiftwidth=2<cr>
nnoremap <leader>4 <esc>:set expandtab softtabstop=4 shiftwidth=4<cr>

" mapping to open CommandT
nnoremap <leader><space> :CommandT<cr>

" Conque term mappings
nnoremap <leader>Cc :ConqueTerm bash<cr>
nnoremap <leader>CC :ConqueTerm 
nnoremap <leader>Cs :ConqueTermSplit bash<cr>
nnoremap <leader>CS :ConqueTermSplit 
nnoremap <leader>Cv :ConqueTermVSplit bash<cr>
nnoremap <leader>CV :ConqueTermVSplit 

" Conque settings
let g:ConqueTerm_EscKey = '<esc>'
let g:ConqueTerm_TERM   = 'xterm-256color'
let g:ConqueTerm_ReadUnfocused = 1 " keep updating when not in buffer
let g:ConqueTerm_CWInsert = 1 " Can <C-w> out of a terminal buffer

" NERDtree mappings
nnoremap <silent> <leader>t :NERDTreeToggle<cr>

" Command for opening a url on a mac:
command! -bar -nargs=1 OpenURL :!open <args>

" Zen Coding
let g:user_zen_expandabbr_key = '<c-e>'

" save a file you edited without the needed permissions
nnoremap <leader>W <esc>:w !sudo tee > /dev/null %

" vimrc editing mappings
nnoremap <leader>v <esc>:e ~/.vimrc<cr>
nnoremap <leader>V <esc>:so ~/.vimrc<cr>

" pep8
nnoremap <leader>p <esc>:call Pep8()<cr>

" :: Syntax and colours ::

if &term =~ "256color"
  set t_Co=256
endif

if &t_Co > 2 
  colorscheme vaz
  syntax on
  set hlsearch
endif


" :: Autocommands ::

if has("autocmd")
  " Enable file type detection.
  filetype plugin indent on

  " make sure grep shows filename even if searching for single file
  " this is for LaTeX-Suite.
  set grepprg=grep\ -nH\ $*

  " Make sure new empty .tex files load vim-latex
  let g:tex_flavor='latex'

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  au FileType text setlocal textwidth=78

  " set cursorline for current window only
  au WinEnter,BufEnter * setlocal cursorline
  au WinLeave,BufLeave * setlocal nocursorline

  " set relative line numbers only in current window
  if version >= 703
    au BufRead,WinEnter,BufEnter * setlocal rnu | :vertical resize +2
    au BufLeave,WinLeave * setlocal nornu | :vertical resize -2
  else
    au BufRead,BufEnter,WinEnter * setlocal nu
    au BufLeave,WinLeave * setlocal nonu
  endif

  " Leave insert mode when idling
  " au CursorHoldI * stopinsert   " nope this is pretty annoying.

  " when editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " auto-detect git commit message files for syntax highlighting
  au BufNewFile,BufRead COMMIT_EDITMSG set filetype=gitcommit

  " Don't show control chars in conque term
  au FileType conque_term
    \ setlocal nolist |
    \ setlocal nornu | 
    \ map <C-x> <F5>

  " don't expand tabs to spaces in makefiles
  au FileType make setlocal noexpandtab

  " reload vimrc when we save it
  au BufWritePost .vimrc so ~/.vimrc

  augroup END
else
  set autoindent
endif

" :: Settings ::
set nocompatible
set backspace=indent,eol,start
set writebackup         " keep a backup file
set history=500
set ruler
set showcmd             " display incomplete commands
set incsearch           " do incremental searching
set ignorecase          " ignore case when searching in all lower-case
set smartcase           " but not when searching with some caps
set scrolloff=3         " keep n lines ahead or behind always showing
set wildmode=longest,list " tab autocomplete like bash
set wildignore=*.pyc,*.o,.git,.hg,.svn " ignore these files in wildcard
set foldmethod=marker   " folding code manually (no text inserted)
set shortmess+=I        " skip splash screen on empty files
set expandtab           " expand tabs into spaces
set tabstop=8           " How many spaces does a tab show up as
set softtabstop=2
set shiftwidth=2
set virtualedit=all     " can move cursor even where there's no characters
set hidden              " buffers can be hidden while modified
set noerrorbells        " error bells are annoying
set visualbell          " error bells are annoying
set t_vb=               " error bells are annoying   
set list                " show control characters, line endings etc.
silent! set listchars=tab:»\ ,trail:·,extends:#,precedes:#,nbsp:·
set clipboard+=unnamed  " make the unnamed register equal os clipboard
set mouse=a             " mainly just so I can resize split windows easier
set splitright splitbelow " split more intuitively
set cursorline
set cursorcolumn
silent! set colorcolumn=72,73,74,75,76,77,78,79,80 " so I know 72 and 80
" setlocal cursorline     " cursor line highlighting
set viminfo='20,<50,s10,h,% " remember marks, searches, registers, buffer list
runtime macros/matchit.vim " % matches more than just brackets:
set completeopt=menuone,longest,preview
if version >= 703
  set rnu
else
  set nu
endif


" :: Keymappings and commands ::

" better ESC
inoremap kj <esc>

" easier ex mode
nnoremap ; :
vnoremap ; :
cnoremap kj <C-c>

" allow usual ;
nnoremap <leader>; ;

" Better mapleader
let mapleader=","
let g:mapleader=","

" use Q to show command history
nmap Q q:

" clear highlighting from last search
nnoremap <silent> <leader>/ :nohl<cr>

" Make Y work like other capitals
map Y y$

" Make up and down keys useful for wrapped lines.
map <up> gk
map <down> gj

" easier window movement
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" pressing return in normal mode opens a line below
nnoremap <cr> O<esc>

" swap ` with ' because ' is closer and ` is useless
nnoremap ' `
nnoremap ` '

" scroll viewport faster
nnoremap <c-e> 5<c-e>
nnoremap <c-y> 5<c-y>

" keep search pattern at centre of screen
nnoremap n nzz
nnoremap N Nzz

" toggle showing control characters
nnoremap <silent> <leader>s :set list!<cr>

" easy underlining/overlining
nnoremap <leader>== yyPv$r=jyypv$r=
nnoremap <leader>** yyPv$r*jyypv$r*
nnoremap <leader>=  yypv$r=
nnoremap <leader>-  yypv$r-

" paste with blackhole register
nnoremap <silent> <leader>p "_p
nnoremap <silent> <leader>P "_P

" show syntax highlighting groups for word under cursor
nnoremap <silent> <leader>h :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" local cd to current file's dir
nnoremap <leader>l :lcd %:p:h<cr>

function! NumberToggle()
  if(&number == 1)
    if version >= 703
      set rnu
    else
      set nonu
    endif
  elseif(&relativenumber == 1)
    set nornu
  else
    set nu
  endif
endfunc

" toggle showing relative line numbers
nnoremap <silent> <leader>n :call NumberToggle()<cr>

" easier switching buffers, opening files
nnoremap <silent> H :bp<cr>
nnoremap <silent> L :bn<cr>
nnoremap <silent> <leader>d :bd<cr>
nnoremap <silent> <tab> <c-^>

" Switch tabbing style
nnoremap <leader>2 <esc>:set expandtab tabstop=2 softtabstop=2 shiftwidth=2<cr>
nnoremap <leader>4 <esc>:set expandtab tabstop=4 softtabstop=4 shiftwidth=4<cr>
nnoremap <leader>8 <esc>:set expandtab tabstop=8 softtabstop=8 shiftwidth=8<cr>
nnoremap <leader><leader>2 <esc>:set noexpandtab tabstop=2 softtabstop=2 shiftwidth=2<cr>
nnoremap <leader><leader>4 <esc>:set noexpandtab tabstop=4 softtabstop=4 shiftwidth=4<cr>
nnoremap <leader><leader>8 <esc>:set noexpandtab tabstop=8 softtabstop=8 shiftwidth=8<cr>

" Command for opening a url on a mac:
command! -bar -nargs=1 OpenURL :!open <args>

" sudo save a file
cmap w!! w !sudo tee % >/dev/null

" vimrc editing mappings
nnoremap <leader>v <esc>:e ~/.vimrc<cr>
nnoremap <leader>V <esc>:so ~/.vimrc<cr>

" Folding
nnoremap <leader>z <esc>:set foldlevel=10000<cr>
nnoremap <leader>Z <esc>:set foldlevel=-10000<cr>



" :: Plugins ::

" Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle!
Bundle 'gmarik/Vundle'

Bundle 'matchit.zip'
Bundle 'tpope/vim-surround'
Bundle 'vim-scripts/TailMinusF'
Bundle 'Lokaltog/vim-easymotion'
  let g:EasyMotion_leader_key = '<space>'
Bundle 'nathanaelkane/vim-indent-guides'
  let g:indent_guides_auto_colors = 0
  let g:indent_guides_enable_on_vim_startup = 1
Bundle 'vimoutliner/vimoutliner'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'ervandew/supertab'
  let g:SuperTabDefaultCompletionType = "context"
  let g:SuperTabContextDefaultCompletionType = "<c-n>"
  let g:SuperTabCompletionContexts = ['s:ContextText', 's:ContextDiscover']
  let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&keywordfunc', '&completefunc']
  let g:SuperTabDefaultCompletionTypeDiscovery = ["&completefunc:<c-x><c-u>", "&omnifunc:<c-x><c-o>", '&keywordfunc:<c-n>']
  let g:SuperTabRetainCompletionDuration = 'completion'
  let g:SuperTabLongestEnhanced = 1
Bundle 'altercation/vim-colors-solarized'
  let g:solarized_termcolors=256
Bundle 'git://git.wincent.com/command-t.git'
  nnoremap <silent> <leader><space> :CommandT<cr>
  let g:CommandTMaxFiles = 50000
  let g:CommandTMaxHeight = 20
  let g:CommandTMinHeight = 20
  let g:CommandTMatchWindowReverse = 1
  let g:CommandTCancelMap = ['<C-c>', '<esc>']
Bundle 'sjbach/lusty'
  nnoremap <silent> <s-tab> :LustyJuggler<cr>
  nnoremap <silent> <leader><tab> :LustyBufferExplorer<cr>
  nnoremap <silent> <leader>o :LustyFilesystemExplorer<cr>
  nnoremap <silent> <leader>O :LustyFilesystemExplorerFromHere<cr>
  let g:LustyJugglerSuppressRubyWarning = 1
Bundle 'ack.vim'
  nnoremap <leader>a <esc>:Ack! 
Bundle 'rstacruz/sparkup'
Bundle 'tpope/vim-rails.git'
Bundle 'tpope/vim-fugitive'
Bundle 'groenewege/vim-less'
Bundle 'timcharper/textile.vim'



" :: Syntax and colours ::

if &term =~ "256color"
  set t_Co=256
endif

if &t_Co > 2 
  syntax on
  colorscheme vaz
  set hlsearch
endif


" :: Autocommands ::

" Enable file type detection.
filetype plugin indent on

" make sure grep shows filename even if searching for single file
" this is for LaTeX-Suite.
set grepprg=grep\ -nH\ $*

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
au!

" For all text files set 'textwidth' to 78 characters.
au FileType text setlocal textwidth=78

" absolute line numbers in insert mode
au InsertEnter * :set nu
au InsertLeave * :set rnu

" set cursorline for current window only
" au WinEnter,BufEnter * setlocal cursorline
" au WinLeave,BufLeave * setlocal nocursorline

" Leave insert mode when idling
" au CursorHoldI * stopinsert   " nope this is pretty annoying.

" when editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
au BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

" auto-detect git commit message files for syntax highlighting
au BufNewFile,BufRead COMMIT_EDITMSG set filetype=gitcommit

" don't expand tabs to spaces in makefiles
au FileType make setlocal noexpandtab

au FileType python
  \ nnoremap <leader>8 <esc>:call Pep8()<cr> |
  \ setlocal omnifunc=pythoncomplete#Complete |
  \ setlocal foldmethod=indent |
  \ setlocal foldlevel=9999

au FileType css let g:SuperTabDefaultCompletionType = '<c-x><c-o>'

au FileType php set expandtab tabstop=8 softtabstop=2 shiftwidth=2

" reload vimrc when we save it
au BufWritePost .vimrc so ~/.vimrc

augroup END
